server:
  ssl:
    key-store: "file:/path/to/your/keystore.p12"  # 절대 경로로 설정
    key-store-type: PKCS12
    key-store-password: ${KEY_STORE_PASSWORD}  # 환경변수나 GitHub 시크릿에서 가져옴
  port: 443

spring:
  jwt:
    secret-key: ${JWT_SECRET_KEY}  # JWT 비밀 키 (256비트 이상)
    redirect: "https://yoonsever.xn--h32bi4v.xn--3e0b707e:443/login?name=%s&user_uuid=%s"  # 로그인 후 리디렉션 URL (사용자 uuid 포함)
    access-token:
      expiration-time: 3600000  # 액세스 토큰 만료 시간 (밀리초 단위, 1시간)
    refresh-token:
      expiration-time: 604800000  # 리프레시 토큰 만료 시간 (밀리초 단위, 7일)

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: ${GOOGLE_REDIRECT_URI}

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope:
              - profile_nickname
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI}
            client-name: Kakao
            client-authentication-method: client_secret_post

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${NAVER_REDIRECT_URI}

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  datasource:
    url: ${DB_URL} # 실제 DB URL
    username: ${DB_USERNAME} # 실제 사용자 이름
    password: ${DB_PASSWORD} # 실제 사용자 비밀번호
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create  # 처음에는 create -> 나중에는 update
    show-sql: true
  spring:
    servlet:
      multipart:
        enabled: true # multipart 기능 활성화
        max-file-size: 10MB # 업로드할 파일의 최대 크기
        max-request-size: 10MB # 요청 크기 제한
        file-size-threshold: 2KB # 임시 파일이 저장될 크기

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET}  # 실제 S3 버킷 이름
    region:
      static: ${AWS_REGION}  # 실제 지역
    stack:
      auto: false
    credentials:
      accessKey: ${AWS_ACCESS_KEY} # 실제 엑세스 키
      secretKey: ${AWS_SECRET_KEY}  # 실제 비밀 엑세스 키
