name: Deploy Application

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 17 설치
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Java 17로 설정

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew

      # 4. AWS CLI 설정
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 5. Gradle 빌드 및 배포
      - name: Run Gradle build and deploy
        run: |
          ./gradlew build  # 빌드 실행
          ./gradlew bootRun  # 애플리케이션 실행

      # 6. EC2에 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # SSH를 사용하여 EC2에 접속하고 애플리케이션을 실행
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # EC2 서버에 접속하여 애플리케이션 빌드 및 실행
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /home/ec2-user/my-app  # 애플리케이션 디렉토리로 이동
            git pull origin main  # main 브랜치에서 최신 코드 가져오기
            ./gradlew build  # 애플리케이션 빌드
            nohup java -jar demo-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &  # 백그라운드에서 애플리케이션 실행
          EOF

      # 7. EC2 서버에서 애플리케이션 실행 후 URL 확인
      - name: Check application URL
        run: |
          curl -I https://yoonsever.xn--h32bi4v.xn--3e0b707e:443  # 서버 상태 확인
